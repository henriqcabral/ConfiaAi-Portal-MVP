# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - ConfiaAi-Portal

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: confiai-portal-mvp
  WEBAPP_NAME: confiaai-portal
  WEBHOOK_URL: https://$ConfiaAi-Portal:s3A4Phi9lti7Ywp0QYkvt6yDo7gfiSxgepNHuJfgvhNLjPfJy2ECh8EXmET6@confiaai-portal-e2grdsf7cvgpcfbx.scm.canadacentral-01.azurewebsites.net/api/registry/webhook

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Login to container image to registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
    
      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      - name: Trigger WebApp Deploy
        run: |
          echo "Triggering WebApp deployment..."
          curl -X POST ${{ env.WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{"push_data": {"tag": "latest"}}'

